#!/usr/bin/env amm

load.ivy("io.circe"        %% "circe-core" % "0.4.0")
load.ivy("io.circe"        %% "circe-jawn" % "0.4.0")
load.ivy("org.typelevel"   %% "cats"       % "0.7.0")
load.ivy("com.davegurnell" %% "spandoc"    % "0.2.0-SNAPSHOT")

@

import spandoc._
import spandoc.transform._
import cats.data.State

// State type:

type HeaderLevel = Int
type HeaderNumbers = Map[HeaderLevel, Int]
type HeaderState[A] = State[HeaderNumbers, A]

// Primitive state operations:

// Get the heading number for a particular level:
def get(level: Int): HeaderState[Int] =
  State.inspect(nums => nums.getOrElse(level, 1))

// Set the heading number for a particular level:
def set(level: Int, number: Int): HeaderState[Unit] =
  State.modify(nums => nums + (level -> number))

// Reset counters for levels >= level to 1:
def reset(level: Int): HeaderState[Unit] =
  State.modify(nums => nums.filterNot(_._1 > level))

// Increment the heading number at a level
// and reset levels greater than level:
def inc(level: Int): HeaderState[Unit] =
  for {
    n <- get(level)
    _ <- set(level, n + 1)
    _ <- reset(level + 1)
  } yield ()

// Get a fully formatted heading number
// for the specified level:
def str(level: Int): HeaderState[Str] =
  State.inspect { nums =>
    Str((1 to level)
      .map(level => nums.getOrElse(level, 1))
      .mkString("", ".", ". "))
  }

val filter = TopDown.blockM[HeaderState] {
  case Header(level, attr, content) =>
    for {
      s <- str(level)
      h <- State.pure(Header(level, attr, s +: content))
      _ <- inc(level)
    } yield h
}

transformStdin(filter(_).runA(Map.empty).value)
